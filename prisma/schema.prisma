generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  avatarPath          String?               @map("avatar_path")
  telegramId          String?               @unique @map("telegram_id")
  rights              Role[]                @default([USER])
  article             Article[]
  ChannelVerification ChannelVerification[]
  channels            Channel[]
  OrderUmaBot OrderUmaBot[]
  OrderPackages OrderPackages[]

  @@map("users")


}

model Channel {
  id                  String                @id @default(cuid())
  url                 String                @unique @map("channel_url")
  title               String?
  description         String?
  avatar              String?
  userId              String?               @map("user_id")
  status              ChannelStatus         @default(MODERATION)
  isActual            Boolean               @default(false) @map("is_actual")
  price               Int?
  format24h           Boolean               @default(true) @map("format_24h")
  format48h           Boolean               @default(true) @map("format_48h")
  format72h           Boolean               @default(true) @map("format_72h")
  formatNative        Boolean               @default(true) @map("format_native")
  format7d            Boolean               @default(true) @map("format_7d")
  formatRepost        Boolean               @default(true) @map("format_repost")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  categoriesChannel   CategoriesChannel[]
  channelReviews      ChannelReviews[]
  ChannelVerification ChannelVerification[]
  user                User?                 @relation(fields: [userId], references: [id])
  posts               Post[]
  stats               Stats?

  @@map("channels")
}

model ChannelReviews {
  id          String   @id @default(cuid())
  name        String
  description String
  review      String
  rating      Float
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  channelId   String   @map("channel_id")
  channel     Channel  @relation(fields: [channelId], references: [id])

  @@map("channel_reviews")
}

model StatPublicJob {
  id          String    @id @default(cuid())
  startedAt   DateTime  @map("started_at")
  finishedAt  DateTime? @map("finished_at")
  parsedCount Int       @default(0) @map("parsed_count")

  @@map("stats_public_job")
}

model StatPublicConfig {
  id              String   @id @default("singleton")
  intervalSeconds Int      @default(60) @map("interval_seconds")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("stats_public_config")
}

model Stats {
  id          String   @id @default(cuid())
  channelId   String   @unique @map("channel_id")
  title       String?
  description String?
  isVerified  Boolean  @default(false) @map("is_verified")
  subscribers Int?
  photos      Int?
  videos      Int?
  files       Int?
  links       Int?
  gender      Int?     @default(0)
  view        Int?     @default(0)
  er          Float?   @default(0)
  cpv         Float?   @default(0)
  price       Int?     @default(0)
  imgSrc      String?  @default("channels-img/default.png") @map("img_src")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  channel     Channel  @relation(fields: [channelId], references: [id])

  @@map("stats")
}

model Post {
  id          String    @id @default(cuid())
  channelId   String    @map("channel_id")
  dataPost    String    @unique @map("data_post")
  messageUrl  String    @map("message_url")
  messageText String?   @map("message_text")
  views       Int?      @default(0)
  datetime    DateTime?
  photos      String[]  @default([])
  videos      String[]  @default([])
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  channel     Channel   @relation(fields: [channelId], references: [id])

  @@map("posts")
}

model Category {
  id                String              @id @default(cuid())
  name              String              @unique
  slug              String              @unique
  seoText           String?             @map("seo_text")
  categoriesChannel CategoriesChannel[]

  @@map("categories")
}

model CategoriesChannel {
  channelId  String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  channel    Channel  @relation(fields: [channelId], references: [id])

  @@id([channelId, categoryId])
  @@map("categories_channels")
}

model ModeratorChatSession {
  moderatorId      String  @id
  clientId         String
  pendingRejection String?

  @@map("moderator_chat_sessions")
}

model Article {
  id        String   @id @default(cuid())
  title     String
  content   String
  slug      String   @unique
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("articles")
}

model ChannelVerification {
  id        String   @id @default(uuid())
  channelId String   @map("channel_id")
  userId    String   @map("user_id")
  url       String
  status    String   @default("PENDING")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  channel   Channel  @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("channel_verification")
}

enum Role {
  USER
  PREMIUM
  MANAGER
  ADMIN
}

enum ChannelStatus {
  MODERATION
  APPROVED
  REJECTED
}

model OrderUmaBot {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  title      String
  price      String
  priceYear  String?  @map("price_year")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("orders_uma_bot")
}

model OrderPackages {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  title      String
  subtitle   String
  price      String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("orders_packages")
}