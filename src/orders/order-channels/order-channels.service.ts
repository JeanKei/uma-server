import { Injectable } from "@nestjs/common";
import { PrismaService } from "@/prisma.service";
import { TelegramService } from "@/telegram/telegram.service";
import {
  MODERATOR_UMA,
  TELEGRAM_GROUP_CHAT_ID,
} from "@/telegram/telegram.constants";
import { OrderChannelsDto } from "./dto/order-channels.dto";

@Injectable()
export class OrderChannelsService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly telegram: TelegramService
  ) {}

  async createOrder(dto: OrderChannelsDto, userId: string) {
    const order = await this.prisma.orderChannels.create({
      data: {
        userId,
        postText: dto.postText,
        totalPrice: dto.totalPrice,
        totalSubscribers: dto.totalSubscribers,
        images: dto.imageUrls,
        publishDates: JSON.parse(JSON.stringify(dto.publishDates)),
        channels: JSON.parse(JSON.stringify(dto.channels)),
      },
    });

    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      select: { name: true, telegramId: true },
    });

    if (user?.telegramId) {
      await this.telegram.sendMessage(
        Number(user.telegramId),
        `üßæ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.`,
        { parse_mode: "HTML" }
      );
    }

    const moderatorMessage = `üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user?.name ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
üì¶ –ö–∞–Ω–∞–ª–æ–≤: ${dto.channels.length}
üí∞ –°—É–º–º–∞: ${dto.totalPrice}‚ÇΩ
üßë‚Äçü§ù‚Äçüßë –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${dto.totalSubscribers}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    if (MODERATOR_UMA) {
      await this.telegram.sendMessage(MODERATOR_UMA, moderatorMessage, {
        parse_mode: "HTML",
      });

      if (TELEGRAM_GROUP_CHAT_ID) {
        await this.telegram.sendMessage(
          TELEGRAM_GROUP_CHAT_ID,
          moderatorMessage,
          {
            parse_mode: "HTML",
          }
        );
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (dto.imageUrls?.length) {
      const HOST = process.env.API_HOST?.replace(/\/$/, "") || "";

      const mediaGroup = dto.imageUrls.map((url) => ({
        type: "photo" as const,
        media: `${HOST}/uploads${url}`,
      }));

      if (MODERATOR_UMA) {
        await this.telegram.sendMediaGroup(MODERATOR_UMA, mediaGroup);
      }

      if (TELEGRAM_GROUP_CHAT_ID) {
        await this.telegram.sendMediaGroup(TELEGRAM_GROUP_CHAT_ID, mediaGroup);
      }
    }

    return { message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞" };
  }
}
