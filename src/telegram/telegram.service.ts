import { Injectable } from "@nestjs/common";
import { Telegraf } from "telegraf";
import { InjectBot } from "nestjs-telegraf";
import { PrismaService } from "@/prisma.service";
import { TELEGRAM_MODERATORS } from "./telegram.constants";
import { Context } from "telegraf";

type SendMessageOptions = Parameters<Telegraf["telegram"]["sendMessage"]>[2];

@Injectable()
export class TelegramService {
  // moderatorId -> clientId
  private chatSession = new Map<number, number>();

  // clientId -> moderatorId
  private replyMap = new Map<number, number>();

  constructor(
    private readonly prisma: PrismaService,
    @InjectBot() private readonly bot: Telegraf
  ) {}

  async sendMessage(
    chatId: number,
    text: string,
    extra?: Parameters<Telegraf["telegram"]["sendMessage"]>[2]
  ): Promise<void> {
    await this.bot.telegram.sendMessage(chatId, text, extra);
  }

  async handleAction(
    ctx: Context,
    action: string,
    channelId: string,
    clientId: string
  ) {
    const chatId = ctx.chat?.id;
    const messageId = (ctx.callbackQuery as any)?.message?.message_id;

    if (!chatId || !messageId) return;

    if (action === "start_chat") {
      this.chatSession.set(chatId, Number(clientId)); // —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
      await ctx.answerCbQuery("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ");
    }

    // approve –∏ reject ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ...
    else if (action === "approve") {
      await this.prisma.telegramChannel.update({
        where: { id: channelId },
        data: { status: "APPROVED" },
      });

      await ctx.editMessageText("‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–¥–æ–±—Ä–µ–Ω–æ");
      await this.sendMessage(Number(clientId), "‚úÖ –í–∞—à –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω.");
      await ctx.answerCbQuery("–û–¥–æ–±—Ä–µ–Ω–æ");
    } else if (action === "reject") {
      await this.prisma.telegramChannel.update({
        where: { id: channelId },
        data: { status: "REJECTED" },
      });

      await ctx.editMessageText("‚ùå –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ");
      await this.sendMessage(
        Number(clientId),
        "‚ùå –í–∞—à –∫–∞–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
      );
      await ctx.answerCbQuery("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ");
    }
  }

  async handleText(ctx: Context) {
    const message = ctx.message as any;
    const senderId = message?.from?.id;
    const text = message?.text;

    if (!message || message.chat.type !== "private" || !senderId || !text)
      return;

    const isModerator = TELEGRAM_MODERATORS.includes(senderId);
    const clientId = this.chatSession.get(senderId);

    if (isModerator && clientId) {
      // –º–æ–¥–µ—Ä–∞—Ç–æ—Ä ‚Üí –∫–ª–∏–µ–Ω—Ç
      await this.sendMessage(
        clientId,
        `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>:\n\n${text}`,
        { parse_mode: "HTML" }
      );

      this.replyMap.set(clientId, senderId); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –∫—Ç–æ –ø–∏—Å–∞–ª
      return;
    }

    // –∫–ª–∏–µ–Ω—Ç ‚Üí –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    const moderatorId = this.replyMap.get(senderId);
    if (moderatorId) {
      await this.sendMessage(
        moderatorId,
        `üì® <b>–û—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>:\n@${message.from?.username} (ID: ${senderId})\n\n${text}`,
        { parse_mode: "HTML" }
      );
    }
  }
}
