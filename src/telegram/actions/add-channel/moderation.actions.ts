import { Injectable } from "@nestjs/common";
import { Context } from "telegraf";
import { PrismaService } from "@/prisma.service";

@Injectable()
export class ModerationActions {
  constructor(private readonly prisma: PrismaService) {}

  private isTextMessage(message: any): message is { text: string } {
    return typeof message?.text === "string";
  }

  async handle(
    ctx: Context,
    action: string,
    channelId: string,
    clientId: string
  ) {
    const chatId = ctx.chat?.id;
    const messageId = ctx.callbackQuery?.message?.message_id;
    if (!chatId || !messageId) return;

    const channel = await this.prisma.telegramChannel.findUnique({
      where: { id: channelId },
      select: { url: true, userId: true },
    });

    const user = await this.prisma.user.findUnique({
      where: { id: channel?.userId },
      select: { name: true, telegramId: true },
    });

    const channelUrl = channel?.url ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const clientName = user?.name ?? "–ö–ª–∏–µ–Ω—Ç";

    if (action === "approve") {
      await this.prisma.telegramChannel.update({
        where: { id: channelId },
        data: { status: "APPROVED" },
      });

      await ctx.editMessageText(
        `‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–¥–æ–±—Ä–µ–Ω–æ\nüë§ –ö–ª–∏–µ–Ω—Ç: @${clientName}\nüìé –ö–∞–Ω–∞–ª: ${channelUrl}`
      );

      await ctx.telegram.sendMessage(
        Number(clientId),
        `‚úÖ –í–∞—à –∫–∞–Ω–∞–ª <b>${channelUrl}</b> –æ–¥–æ–±—Ä–µ–Ω!`,
        { parse_mode: "HTML" }
      );

      await ctx.answerCbQuery("–û–¥–æ–±—Ä–µ–Ω–æ");
    }

    if (action === "reject") {
      await this.prisma.moderatorChatSession.upsert({
        where: { moderatorId: String(ctx.from?.id) },
        update: { clientId, pendingRejection: channelId },
        create: {
          moderatorId: String(ctx.from?.id),
          clientId,
          pendingRejection: channelId,
        },
      });

      await ctx.telegram.sendMessage(
        ctx.from!.id,
        "‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç—É:"
        // –ë–ï–ó force_reply ‚Äî —Ç–µ–ø–µ—Ä—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      );

      await ctx.answerCbQuery("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞");
    }
  }

  async handleRejectionReason(ctx: Context) {
    const moderatorId = String(ctx.from?.id);
    const session = await this.prisma.moderatorChatSession.findUnique({
      where: { moderatorId },
    });

    if (!session?.pendingRejection) return;

    const message = ctx.message;
    if (!this.isTextMessage(message)) return;

    const reason = message.text;

    const channel = await this.prisma.telegramChannel.findUnique({
      where: { id: session.pendingRejection },
      select: { url: true, userId: true },
    });

    const user = await this.prisma.user.findUnique({
      where: { id: channel?.userId },
      select: { name: true, telegramId: true },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await this.prisma.telegramChannel.update({
      where: { id: session.pendingRejection },
      data: { status: "REJECTED" },
    });

    const channelUrl = channel?.url ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

    // üî¥ 1. –°–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    await ctx.telegram.sendMessage(
      Number(session.clientId),
      `‚ùå –í–∞—à –∫–∞–Ω–∞–ª <b>${channelUrl}</b> –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.`,
      { parse_mode: "HTML" }
    );

    // üî¥ 2. –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞
    await ctx.telegram.sendMessage(
      Number(session.clientId),
      `‚ùóÔ∏è <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞</b>:\n${reason}`,
      { parse_mode: "HTML" }
    );

    // üßë‚Äçüíº –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    await ctx.reply(
      `üì® –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É.\n\nüë§ –ö–ª–∏–µ–Ω—Ç: @${user?.name} (ID: ${user?.telegramId})\nüìé –ö–∞–Ω–∞–ª: ${channel?.url}\nüìÑ –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
      { parse_mode: "HTML" }
    );

    // –û—á–∏—Å—Ç–∫–∞ —Ñ–ª–∞–≥–∞
    await this.prisma.moderatorChatSession.update({
      where: { moderatorId },
      data: { pendingRejection: null },
    });
  }
}
