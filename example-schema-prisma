generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String            @id @default(cuid())
  name       String?
  avatarPath String?           @map("avatar_path")
  telegramId String?           @unique @map("telegram_id")
  rights     Role[]            @default([USER])
  article    Article[]
  channels   Channel[]

  @@map("users")
}

model Channel {
  id         String             @id @default(cuid())
  url        String             @unique @map("channel_url") 
  userId     String?            @map("user_id")
  status     ChannelStatus      @default(MODERATION)
  isActual   Boolean            @default(false) @map("is_actual")
  price      Int?
  format24h  Boolean            @default(true) @map("format_24h")
  format48h  Boolean            @default(true) @map("format_48h")
  format72h  Boolean            @default(true) @map("format_72h")
  formatNative Boolean          @default(true) @map("format_native")
  format7d   Boolean            @default(true) @map("format_7d")
  formatRepost Boolean          @default(true) @map("format_repost")
  snapshot         StatPublic?
  statinItial      StatInitial? 
  user             User?              @relation(fields: [userId], references: [id])
  categoriesChannel CategoriesChannel[] 
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")

  @@map("channels")
}

model StatPublic {
  id          String          @id @default(cuid())
  channelId   String          @unique @map("channel_id")
  avatar      String?         @map("avatar")
  title       String?         @map("title")
  description String?         @map("description")
  username    String?         @map("username")
  isVerified  Boolean         @map("is_verified")
  subscribers Int?         @map("subscribers")
  photos      Int?         @map("photos")
  videos      Int?         @map("videos")
  files       Int?         @map("files")
  links       Int?         @map("links")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  channel     Channel @relation(fields: [channelId], references: [id])

  @@map("stat_public")
}

model StatPublicJob {
  id          String    @id @default(cuid())
  startedAt   DateTime  @map("started_at")
  finishedAt  DateTime? @map("finished_at")
  parsedCount Int       @default(0) @map("parsed_count")

  @@map("stat_public_job")
}

model StatPublicConfig {
  id              String   @id @default("singleton")
  intervalSeconds Int      @default(60) @map("interval_seconds")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("stat_public_config")
}

model StatInitial {
  id          String   @id @default(cuid())
  channelId   String   @unique @map("channel_id")
  title       String?  @map("title")
  description String?  @map("description")
  subscribers Int?     @map("subscribers")
  gender      String?  @map("gender")
  view        Int?     @map("view")
  er          Float?   @map("er")
  cpv         Float?   @map("cpv")
  price       Int?     @map("price")
  imgSrc      String?  @map("img_src")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  channel     Channel @relation(fields: [channelId], references: [id])

  @@map("stat_initial")
}

model Category {
  id                String             @id @default(cuid())
  name              String             @unique
  categoriesChannel CategoriesChannel[]

  @@map("categories")
}

model CategoriesChannel {
  channelId  String
  categoryId String

  channel    Channel @relation(fields: [channelId], references: [id])
  category   Category        @relation(fields: [categoryId], references: [id])

  @@id([channelId, categoryId])
  @@map("categories_channel")
}

model ModeratorChatSession {
  moderatorId      String  @id
  clientId         String
  pendingRejection String?

  @@map("moderator_chat_sessions")
}

model Article {
  id        String   @id @default(cuid())
  title     String
  content   String
  slug      String   @unique
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("articles")
}

enum Role {
  USER
  PREMIUM
  MANAGER
  ADMIN
}

enum ChannelStatus {
  MODERATION
  APPROVED
  REJECTED
}